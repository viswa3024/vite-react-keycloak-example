function fetchWithRetry(url, options = {}, retries = 3, backoff = 3000) {
    return new Promise((resolve, reject) => {
        const attemptFetch = (n) => {
            fetch(url, options)
                .then(response => {
                    if (!response.ok) {
                        if (n > 0) {
                            setTimeout(() => {
                                attemptFetch(n - 1);
                            }, backoff);
                        } else {
                            reject(new Error(`Fetch failed after ${retries + 1} attempts`));
                        }
                    } else {
                        resolve(response);
                    }
                })
                .catch(error => {
                    if (n > 0) {
                        setTimeout(() => {
                            attemptFetch(n - 1);
                        }, backoff);
                    } else {
                        reject(error);
                    }
                });
        };

        attemptFetch(retries);
    });
}

// Usage example
fetchWithRetry('https://api.example.com/long-response', {}, 3, 3000)
    .then(response => response.json())
    .then(data => {
        console.log(data);
    })
    .catch(error => {
        console.error('Fetch error:', error);
    });
