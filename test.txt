function fetchWithRetry(url, options = {}, retries = 3, backoff = 3000) {
    return new Promise((resolve, reject) => {
        const attemptFetch = (n) => {
            fetch(url, options)
                .then(response => {
                    if (!response.ok) {
                        if (n > 0) {
                            setTimeout(() => {
                                attemptFetch(n - 1);
                            }, backoff);
                        } else {
                            reject(new Error(`Fetch failed after ${retries + 1} attempts`));
                        }
                    } else {
                        resolve(response);
                    }
                })
                .catch(error => {
                    if (n > 0) {
                        setTimeout(() => {
                            attemptFetch(n - 1);
                        }, backoff);
                    } else {
                        reject(error);
                    }
                });
        };

        attemptFetch(retries);
    });
}

// Usage example
fetchWithRetry('https://api.example.com/long-response', {}, 3, 3000)
    .then(response => response.json())
    .then(data => {
        console.log(data);
    })
    .catch(error => {
        console.error('Fetch error:', error);
    });




async function fetchWithRetry(url, options = {}, retries = 3, backoff = 3000) {
    for (let i = 0; i <= retries; i++) {
        try {
            const response = await fetch(url, options);
            if (!response.ok) {
                throw new Error(`Fetch failed with status: ${response.status}`);
            }
            return response; // Return the response if fetch is successful
        } catch (error) {
            if (i < retries) {
                console.warn(`Retrying fetch... Attempt ${i + 1} of ${retries + 1}`);
                await new Promise(resolve => setTimeout(resolve, backoff));
            } else {
                throw new Error(`Fetch failed after ${retries + 1} attempts: ${error.message}`);
            }
        }
    }
}

// Example usage within an async function
const apires = async () => {
    try {
        const response = await fetchWithRetry('https://api.example.com/long-response', {}, 3, 3000);
        const data = await response.json();
        console.log('API Response:', data);
        return data; // Return the data for further use
    } catch (error) {
        console.error('Error fetching data:', error);
        throw error; // Re-throw the error if needed
    }
};

// Call the async function
apires().then(data => {
    console.log('Received data:', data);
}).catch(error => {
    console.error('Error:', error);
});









// utils/fetchWithTimeout.js

export const fetchWithTimeout = async (url, options = {}, timeout = 360000) => {
    const controller = new AbortController();
    const { signal } = controller;

    const timeoutId = setTimeout(() => {
        controller.abort();
    }, timeout);

    try {
        const response = await fetch(url, { ...options, signal });
        if (!response.ok) {
            throw new Error(`Fetch failed with status: ${response.status}`);
        }
        return response;
    } catch (error) {
        if (error.name === 'AbortError') {
            throw new Error('Request timed out');
        }
        throw error;
    } finally {
        clearTimeout(timeoutId);
    }
};



// pages/api/fetchData.js

import { fetchWithTimeout } from '../../utils/fetchWithTimeout';

export default async function handler(req, res) {
    const apiUrl = 'https://api.example.com/long-response';

    try {
        const response = await fetchWithTimeout(apiUrl, {}, 360000); // 6 minutes timeout
        const data = await response.json();
        res.status(200).json(data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}




// utils/fetchWithTimeout.js

export const fetchWithTimeout = async (url, options = {}, timeout = 360000) => { // 6 minutes
    const controller = new AbortController();
    const { signal } = controller;

    signal.addEventListener('abort', () => {
        console.log('Fetch request aborted due to timeout');
    });

    const timeoutId = setTimeout(() => {
        controller.abort();
    }, timeout);

    try {
        const response = await fetch(url, { ...options, signal });
        if (!response.ok) {
            throw new Error(`Fetch failed with status: ${response.status}`);
        }
        return response;
    } catch (error) {
        if (error.name === 'AbortError') {
            throw new Error('Request timed out');
        }
        throw error;
    } finally {
        clearTimeout(timeoutId);
    }
};




// utils/axiosWithTimeout.js

import axios from 'axios';

const axiosInstance = axios.create({
    timeout: 360000, // 6 minutes
});

axiosInstance.interceptors.response.use(
    response => response,
    error => {
        if (error.code === 'ECONNABORTED') {
            return Promise.reject(new Error('Request timed out'));
        }
        return Promise.reject(error);
    }
);

export default axiosInstance;



// pages/api/fetchData.js

import axiosWithTimeout from '../../utils/axiosWithTimeout';

export default async function handler(req, res) {
    const apiUrl = 'https://api.example.com/long-response';

    try {
        const response = await axiosWithTimeout.get(apiUrl);
        res.status(200).json(response.data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}


// pages/index.js

import { useState, useEffect } from 'react';

const IndexPage = () => {
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await fetch('/api/fetchData');
                if (!response.ok) {
                    throw new Error(`Fetch failed with status: ${response.status}`);
                }
                const result = await response.json();
                setData(result);
            } catch (error) {
                setError(error.message);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, []);

    if (loading) return <p>Loading...</p>;
    if (error) return <p>Error: {error}</p>;

    return (
        <div>
            <h1>Data from API</h1>
            <pre>{JSON.stringify(data, null, 2)}</pre>
        </div>
    );
};

export default IndexPage;



